{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"vfx-seqtools \u00b6 Command-line utilities for working with frame sequences in Animation and VFX. Prerequisites \u00b6 You will need Python installed - all supported versions of Python should work. Quickstart \u00b6 Install using pip or pipx . $ pip install vfx-seqtools or $ pipx install vfx-seqtools This will provide the command-line utilities: seqchk - check frame sequences in the current directory for file consistency. seqcp - copy frames according to provided name patterns and frame range. seqdo - do command(s), substituting in the provided frame range. seqexp - expand a frame sequence, to evaluate it visually. seqgen - make a frame sequence from a list of framenumbers. seqls - list frame sequences in the current directory. seqmv - move (rename) frames according to provided name patterns and frame range. seqrm - remove (delete) frames according to provided name patterns and frame range. Examples \u00b6 See examples.md for more examples. Changes \u00b6 See the product Change Log on GitHub for a history of changes. Problems? \u00b6 Please submit issues on GitHub. Want to contribute? \u00b6 Details on the GitHub page: https://github.com/jdmacleod/vfx-seqtools .","title":"Home"},{"location":"#vfx-seqtools","text":"Command-line utilities for working with frame sequences in Animation and VFX.","title":"vfx-seqtools"},{"location":"#prerequisites","text":"You will need Python installed - all supported versions of Python should work.","title":"Prerequisites"},{"location":"#quickstart","text":"Install using pip or pipx . $ pip install vfx-seqtools or $ pipx install vfx-seqtools This will provide the command-line utilities: seqchk - check frame sequences in the current directory for file consistency. seqcp - copy frames according to provided name patterns and frame range. seqdo - do command(s), substituting in the provided frame range. seqexp - expand a frame sequence, to evaluate it visually. seqgen - make a frame sequence from a list of framenumbers. seqls - list frame sequences in the current directory. seqmv - move (rename) frames according to provided name patterns and frame range. seqrm - remove (delete) frames according to provided name patterns and frame range.","title":"Quickstart"},{"location":"#examples","text":"See examples.md for more examples.","title":"Examples"},{"location":"#changes","text":"See the product Change Log on GitHub for a history of changes.","title":"Changes"},{"location":"#problems","text":"Please submit issues on GitHub.","title":"Problems?"},{"location":"#want-to-contribute","text":"Details on the GitHub page: https://github.com/jdmacleod/vfx-seqtools .","title":"Want to contribute?"},{"location":"examples/","text":"Examples \u00b6 This page provides examples using the vfx-seqtools command-line utilities with frame sequences. Replace file patterns and frame ranges with those relevant to your project. Examples Check Frames Copy Frames Do a Command Expand a Sequence Generate a Sequence List Sequences Rename a Sequence Remove a Sequence Check Frames \u00b6 Check all files in the current directory: seqchk Check files in the current directory matching \"COS*\" as a sequence: seqchk \"COS*\" See seqchk for even more examples. Copy Frames \u00b6 Copy frames 1001-1050 from render.####.exr to comped.####.exr : seqcp render.####.exr comped.####.exr -f 1001-1050 Copy even frames in the range 1-10 from animtexture.@.exr to animoffset.@.exr , with a +10 frame offset: seqcp animtexture.@.exr animoffset.@+10.exr -f 1-10x2 See seqcp for even more examples. Do a Command \u00b6 Run a shell command for each frame in a sequence, substituting @ with the frame number: seqdo 'echo Processing frame @' -f 1001-1005 See seqdo for even more examples. Expand a Sequence \u00b6 List all frame numbers represented by a sequence expression: seqexp 1001-1010x2 Expands to: 1001 1003 1005 1007 1009 See seqexp for even more examples. Generate a Sequence \u00b6 Create a sequence expression from a list of frames: seqgen \"1 2 3 4 5\" Output: 1-5 See seqgen for even more examples. List Sequences \u00b6 List all files in the current directory, grouping files by sequence: seqls Output example: render.1001-1050#.exr comped.1001-1050#.exr See seqls for even more examples. Rename a Sequence \u00b6 Rename (move) a sequence of files to a new pattern: seqmv oldname.####.exr newname.####.exr -f 1001-1020 Moves oldname.1001.exr to newname.1001.exr , etc. See seqmv for even more examples. Remove a Sequence \u00b6 Delete a sequence of files from disk: seqrm temp.####.exr -f 1001-1020 Removes temp.1001.exr to temp.1020.exr . See seqrm for even more examples.","title":"Examples"},{"location":"examples/#examples","text":"This page provides examples using the vfx-seqtools command-line utilities with frame sequences. Replace file patterns and frame ranges with those relevant to your project. Examples Check Frames Copy Frames Do a Command Expand a Sequence Generate a Sequence List Sequences Rename a Sequence Remove a Sequence","title":"Examples"},{"location":"examples/#check-frames","text":"Check all files in the current directory: seqchk Check files in the current directory matching \"COS*\" as a sequence: seqchk \"COS*\" See seqchk for even more examples.","title":"Check Frames"},{"location":"examples/#copy-frames","text":"Copy frames 1001-1050 from render.####.exr to comped.####.exr : seqcp render.####.exr comped.####.exr -f 1001-1050 Copy even frames in the range 1-10 from animtexture.@.exr to animoffset.@.exr , with a +10 frame offset: seqcp animtexture.@.exr animoffset.@+10.exr -f 1-10x2 See seqcp for even more examples.","title":"Copy Frames"},{"location":"examples/#do-a-command","text":"Run a shell command for each frame in a sequence, substituting @ with the frame number: seqdo 'echo Processing frame @' -f 1001-1005 See seqdo for even more examples.","title":"Do a Command"},{"location":"examples/#expand-a-sequence","text":"List all frame numbers represented by a sequence expression: seqexp 1001-1010x2 Expands to: 1001 1003 1005 1007 1009 See seqexp for even more examples.","title":"Expand a Sequence"},{"location":"examples/#generate-a-sequence","text":"Create a sequence expression from a list of frames: seqgen \"1 2 3 4 5\" Output: 1-5 See seqgen for even more examples.","title":"Generate a Sequence"},{"location":"examples/#list-sequences","text":"List all files in the current directory, grouping files by sequence: seqls Output example: render.1001-1050#.exr comped.1001-1050#.exr See seqls for even more examples.","title":"List Sequences"},{"location":"examples/#rename-a-sequence","text":"Rename (move) a sequence of files to a new pattern: seqmv oldname.####.exr newname.####.exr -f 1001-1020 Moves oldname.1001.exr to newname.1001.exr , etc. See seqmv for even more examples.","title":"Rename a Sequence"},{"location":"examples/#remove-a-sequence","text":"Delete a sequence of files from disk: seqrm temp.####.exr -f 1001-1020 Removes temp.1001.exr to temp.1020.exr . See seqrm for even more examples.","title":"Remove a Sequence"},{"location":"seqchk/","text":"seqchk \u00b6 seqchk checks image files for validity. This is useful for verifying that all files present are not corrupt or zero-length. It doesn't identify missing frames - use seqls -m to identify missing frames. Usage \u00b6 seqchk [PATTERN] [OPTIONS] PATTERN : Optional filename pattern using shell wildcards (for example, render.*.exr or filename.????.tif ). Options \u00b6 --verbose , -v : Show detailed output for each file. --only-sequences , -o : Only consider sequences, ignore other files. --strict : Stop on the first error. --dry-run , -n : Show what would be checked, but do not actually check files. --version : Show version and exit. Examples \u00b6 Check all files in the current directory: seqchk Check only sequence files in the current directory: seqchk -o Check a JPEG sequence using a shell wildcard: seqchk \"shotA.*.jpg\" Show line-by-line check output for each file: seqchk --verbose \"render.*.exr\" Output \u00b6 Reports unreadable/corrupt files per sequence checked. Returns a nonzero exit code if any problems are found. Typical Use Cases \u00b6 Automated QC in render farms. Pre-delivery checks for VFX shots. Spot-checking sequences after file transfers.","title":"seqchk"},{"location":"seqchk/#seqchk","text":"seqchk checks image files for validity. This is useful for verifying that all files present are not corrupt or zero-length. It doesn't identify missing frames - use seqls -m to identify missing frames.","title":"seqchk"},{"location":"seqchk/#usage","text":"seqchk [PATTERN] [OPTIONS] PATTERN : Optional filename pattern using shell wildcards (for example, render.*.exr or filename.????.tif ).","title":"Usage"},{"location":"seqchk/#options","text":"--verbose , -v : Show detailed output for each file. --only-sequences , -o : Only consider sequences, ignore other files. --strict : Stop on the first error. --dry-run , -n : Show what would be checked, but do not actually check files. --version : Show version and exit.","title":"Options"},{"location":"seqchk/#examples","text":"Check all files in the current directory: seqchk Check only sequence files in the current directory: seqchk -o Check a JPEG sequence using a shell wildcard: seqchk \"shotA.*.jpg\" Show line-by-line check output for each file: seqchk --verbose \"render.*.exr\"","title":"Examples"},{"location":"seqchk/#output","text":"Reports unreadable/corrupt files per sequence checked. Returns a nonzero exit code if any problems are found.","title":"Output"},{"location":"seqchk/#typical-use-cases","text":"Automated QC in render farms. Pre-delivery checks for VFX shots. Spot-checking sequences after file transfers.","title":"Typical Use Cases"},{"location":"seqcp/","text":"seqcp \u00b6 seqcp copies a sequence of files from one pattern to another, for a specified frame range. This is useful for duplicating or versioning image sequences in VFX/animation workflows. Usage \u00b6 seqcp SRC_PATTERN DST_PATTERN [FRAMES] SRC_PATTERN : Source filename pattern (e.g., render.#.exr ). DST_PATTERN : Destination filename pattern (e.g., comped.#.exr ). FRAMES : Frame range or sequence expression (e.g., -f 1001-1050 ). Options \u00b6 --dry-run , -n : Show what would be copied, but do not actually copy files. --interactive , -i : Request confirmation before copying each file. --verbose , -v : Show detailed output for each file. --strict : Stop on the first error. --version : Show version and exit. Examples \u00b6 Copy a sequence from one pattern to another: seqcp render.####.exr comped.####.exr -f 1001-1050 Copy only odd frames in the range 1-100 (for example, 1, 3, 5, 7, ...): seqcp input.####.jpg output.####.jpg -f 1-100x2 Preview what would be copied (dry run): seqcp -n somefile.@.png anotherfile.@.png -f 10-20 Interactively copy files, prompting for each copy: seqcp -i askfile.####.exr confirmfile.####.exr -f 10-20 Copy frames 10-20 and offset the destination frame numbering by +10 frames: seqcp file.####.exr offsetfile.####+10.exr -f 10-20 Output \u00b6 Reports files copied, skipped, or failed. Returns a nonzero exit code if any problems are found.","title":"seqcp"},{"location":"seqcp/#seqcp","text":"seqcp copies a sequence of files from one pattern to another, for a specified frame range. This is useful for duplicating or versioning image sequences in VFX/animation workflows.","title":"seqcp"},{"location":"seqcp/#usage","text":"seqcp SRC_PATTERN DST_PATTERN [FRAMES] SRC_PATTERN : Source filename pattern (e.g., render.#.exr ). DST_PATTERN : Destination filename pattern (e.g., comped.#.exr ). FRAMES : Frame range or sequence expression (e.g., -f 1001-1050 ).","title":"Usage"},{"location":"seqcp/#options","text":"--dry-run , -n : Show what would be copied, but do not actually copy files. --interactive , -i : Request confirmation before copying each file. --verbose , -v : Show detailed output for each file. --strict : Stop on the first error. --version : Show version and exit.","title":"Options"},{"location":"seqcp/#examples","text":"Copy a sequence from one pattern to another: seqcp render.####.exr comped.####.exr -f 1001-1050 Copy only odd frames in the range 1-100 (for example, 1, 3, 5, 7, ...): seqcp input.####.jpg output.####.jpg -f 1-100x2 Preview what would be copied (dry run): seqcp -n somefile.@.png anotherfile.@.png -f 10-20 Interactively copy files, prompting for each copy: seqcp -i askfile.####.exr confirmfile.####.exr -f 10-20 Copy frames 10-20 and offset the destination frame numbering by +10 frames: seqcp file.####.exr offsetfile.####+10.exr -f 10-20","title":"Examples"},{"location":"seqcp/#output","text":"Reports files copied, skipped, or failed. Returns a nonzero exit code if any problems are found.","title":"Output"},{"location":"seqdo/","text":"seqdo \u00b6 seqdo runs a shell command for each frame in a sequence, substituting frame numbers. This is useful for batch processing or automating per-frame operations. Usage \u00b6 seqdo COMMAND [FRAMES] COMMAND : The shell command to run. Use @ and # for frame number patterns. FRAMES : Frame range or sequence expression. Options \u00b6 --dry-run , -n : Show what would be done, but do not actually run commands. --verbose , -v : Show detailed output for each command. --strict : Stop on the first error. --quiet , -q : Only print errors. --version : Show version and exit. Examples \u00b6 Print a message for each frame: seqdo 'echo Processing frame @' -f 1001-1005 Run an image conversion for each frame (requires that convert is available): seqdo 'convert infile.@.jpg -resize 50% outfile.@.jpg' -f 1001-1020 Output \u00b6 Shows command output and errors for each frame. Returns a nonzero exit code if any problems are found.","title":"seqdo"},{"location":"seqdo/#seqdo","text":"seqdo runs a shell command for each frame in a sequence, substituting frame numbers. This is useful for batch processing or automating per-frame operations.","title":"seqdo"},{"location":"seqdo/#usage","text":"seqdo COMMAND [FRAMES] COMMAND : The shell command to run. Use @ and # for frame number patterns. FRAMES : Frame range or sequence expression.","title":"Usage"},{"location":"seqdo/#options","text":"--dry-run , -n : Show what would be done, but do not actually run commands. --verbose , -v : Show detailed output for each command. --strict : Stop on the first error. --quiet , -q : Only print errors. --version : Show version and exit.","title":"Options"},{"location":"seqdo/#examples","text":"Print a message for each frame: seqdo 'echo Processing frame @' -f 1001-1005 Run an image conversion for each frame (requires that convert is available): seqdo 'convert infile.@.jpg -resize 50% outfile.@.jpg' -f 1001-1020","title":"Examples"},{"location":"seqdo/#output","text":"Shows command output and errors for each frame. Returns a nonzero exit code if any problems are found.","title":"Output"},{"location":"seqexp/","text":"seqexp \u00b6 seqexp expands a sequence expression into a list of frame numbers. Useful for visualizing or debugging frame ranges in VFX/animation workflows. Complements seqgen Usage \u00b6 seqexp SEQUENCE SEQUENCE : Frame range or sequence expression (e.g., 1001-1050 , 1-10x2 ). Options \u00b6 --comma-separate , -c : List frame numbers with comma separation. [default: space-separation] --pad , -p : List frame numbers with zero padding, number of zeros to pad. [default: 0] --long-list , -l : Long listing of frame numbers, one per line. --version : Show version and exit. Examples \u00b6 Expand a simple range: seqexp 1001-1005 Output: 1001 1002 1003 1004 1005 Expand a simple range with comma separation: seqexp -c 1001-1005 Output: 1001,1002,1003,1004,1005 Expand a range with step: seqexp 1001-1010x2 Output: 1001 1003 1005 1007 1009 Expand a complex sequence: seqexp 1-5,10-12 Output: 1 2 3 4 5 10 11 12 Expand a complex sequence, with 4-digit padding and long listing: seqexp -l -p 4 1-5,10-12 Output: 0001 0002 0003 0004 0005 0010 0011 0012","title":"seqexp"},{"location":"seqexp/#seqexp","text":"seqexp expands a sequence expression into a list of frame numbers. Useful for visualizing or debugging frame ranges in VFX/animation workflows. Complements seqgen","title":"seqexp"},{"location":"seqexp/#usage","text":"seqexp SEQUENCE SEQUENCE : Frame range or sequence expression (e.g., 1001-1050 , 1-10x2 ).","title":"Usage"},{"location":"seqexp/#options","text":"--comma-separate , -c : List frame numbers with comma separation. [default: space-separation] --pad , -p : List frame numbers with zero padding, number of zeros to pad. [default: 0] --long-list , -l : Long listing of frame numbers, one per line. --version : Show version and exit.","title":"Options"},{"location":"seqexp/#examples","text":"Expand a simple range: seqexp 1001-1005 Output: 1001 1002 1003 1004 1005 Expand a simple range with comma separation: seqexp -c 1001-1005 Output: 1001,1002,1003,1004,1005 Expand a range with step: seqexp 1001-1010x2 Output: 1001 1003 1005 1007 1009 Expand a complex sequence: seqexp 1-5,10-12 Output: 1 2 3 4 5 10 11 12 Expand a complex sequence, with 4-digit padding and long listing: seqexp -l -p 4 1-5,10-12 Output: 0001 0002 0003 0004 0005 0010 0011 0012","title":"Examples"},{"location":"seqgen/","text":"seqgen \u00b6 seqgen generates a sequence expression from a list of framenumbers. Useful for visualizing or debugging frame ranges in VFX/animation workflows. Complements seqexp Usage \u00b6 seqgen [FRAMES] FRAMES : Frames to consider for a sequence expression (for example, 1,2,3,4,5 ). Options \u00b6 --version : Show version and exit. Examples \u00b6 Generate a sequence from a space-separated list of frames: seqgen \"1 2 3 4 5\" 1-5 Generate a sequence from a comma-separated list of frames: seqgen 5,10,15,20 5-20x5","title":"seqgen"},{"location":"seqgen/#seqgen","text":"seqgen generates a sequence expression from a list of framenumbers. Useful for visualizing or debugging frame ranges in VFX/animation workflows. Complements seqexp","title":"seqgen"},{"location":"seqgen/#usage","text":"seqgen [FRAMES] FRAMES : Frames to consider for a sequence expression (for example, 1,2,3,4,5 ).","title":"Usage"},{"location":"seqgen/#options","text":"--version : Show version and exit.","title":"Options"},{"location":"seqgen/#examples","text":"Generate a sequence from a space-separated list of frames: seqgen \"1 2 3 4 5\" 1-5 Generate a sequence from a comma-separated list of frames: seqgen 5,10,15,20 5-20x5","title":"Examples"},{"location":"seqls/","text":"seqls \u00b6 seqls lists all frame sequences in the current directory, grouping files by pattern. This is useful for quickly seeing what sequences are present in a shot or render folder. Usage \u00b6 seqls Options \u00b6 --missing-frames , -m : List missing frames from sequences. --only-sequences , -o : Only consider sequences, ignore other files. --version : Show version and exit. Examples \u00b6 List all files in the current directory, with sequence grouping: seqls Output example: ./COS_002_0045_comp_NFX_v001.1001-1054#.exr ./meridian.21000-21006,21008@@@@@.tif ./testcp.11-19x2#.tif ./notsequence.tif List only sequences in the current directory: seqls -o Output example: ./COS_002_0045_comp_NFX_v001.1001-1054#.exr ./meridian.21000-21006,21008@@@@@.tif ./testcp.11-19x2#.tif List only sequences in the current directory, and identify missing frames: seqls -o -m Output example: ./COS_002_0045_comp_NFX_v001.1001-1054#.exr ./meridian.21000-21006,21008@@@@@.tif Missing frames: 21007 ./testcp.11-19x2#.tif Missing frames: 0012-0018x2 List only files matching \"COS*\": seqls -o -m \"COS*\" Output example: COS_002_0045_comp_NFX_v001.1001-1054#.exr","title":"seqls"},{"location":"seqls/#seqls","text":"seqls lists all frame sequences in the current directory, grouping files by pattern. This is useful for quickly seeing what sequences are present in a shot or render folder.","title":"seqls"},{"location":"seqls/#usage","text":"seqls","title":"Usage"},{"location":"seqls/#options","text":"--missing-frames , -m : List missing frames from sequences. --only-sequences , -o : Only consider sequences, ignore other files. --version : Show version and exit.","title":"Options"},{"location":"seqls/#examples","text":"List all files in the current directory, with sequence grouping: seqls Output example: ./COS_002_0045_comp_NFX_v001.1001-1054#.exr ./meridian.21000-21006,21008@@@@@.tif ./testcp.11-19x2#.tif ./notsequence.tif List only sequences in the current directory: seqls -o Output example: ./COS_002_0045_comp_NFX_v001.1001-1054#.exr ./meridian.21000-21006,21008@@@@@.tif ./testcp.11-19x2#.tif List only sequences in the current directory, and identify missing frames: seqls -o -m Output example: ./COS_002_0045_comp_NFX_v001.1001-1054#.exr ./meridian.21000-21006,21008@@@@@.tif Missing frames: 21007 ./testcp.11-19x2#.tif Missing frames: 0012-0018x2 List only files matching \"COS*\": seqls -o -m \"COS*\" Output example: COS_002_0045_comp_NFX_v001.1001-1054#.exr","title":"Examples"},{"location":"seqmv/","text":"seqmv \u00b6 seqmv renames (moves) a sequence of files from one pattern to another, for a specified frame range. This is useful for versioning, organizing, or retargeting image sequences in VFX/animation workflows. Usage \u00b6 seqmv SRC_PATTERN DST_PATTERN [FRAMES] SRC_PATTERN : Source filename pattern (e.g., oldname.####.exr ). DST_PATTERN : Destination filename pattern (e.g., newname.####.exr ). FRAMES : Frame range or sequence expression (e.g., -f 1001-1020 ). Options \u00b6 --dry-run , -n : Show what would be moved, but do not actually move files. --interactive , -i : Request confirmation before moving each file. --verbose , -v : Show detailed output for each file. --strict : Stop on the first error. --version : Show version and exit. Examples \u00b6 Rename a sequence to a new pattern: seqmv oldname.####.exr newname.####.exr -f 1001-1020 Preview what would be moved (dry run): seqmv -n oldname.####.png newname.####.pnf -f 10-20 Interactively copy files, prompting for each copy: seqmv -i askfile.####.exr confirmfile.####.exr -f 10-20 Move frames 10-20 and offset the destination frame numbering by +10 frames: seqmv file.####.exr offsetfile.####+10.exr -f 10-20","title":"seqmv"},{"location":"seqmv/#seqmv","text":"seqmv renames (moves) a sequence of files from one pattern to another, for a specified frame range. This is useful for versioning, organizing, or retargeting image sequences in VFX/animation workflows.","title":"seqmv"},{"location":"seqmv/#usage","text":"seqmv SRC_PATTERN DST_PATTERN [FRAMES] SRC_PATTERN : Source filename pattern (e.g., oldname.####.exr ). DST_PATTERN : Destination filename pattern (e.g., newname.####.exr ). FRAMES : Frame range or sequence expression (e.g., -f 1001-1020 ).","title":"Usage"},{"location":"seqmv/#options","text":"--dry-run , -n : Show what would be moved, but do not actually move files. --interactive , -i : Request confirmation before moving each file. --verbose , -v : Show detailed output for each file. --strict : Stop on the first error. --version : Show version and exit.","title":"Options"},{"location":"seqmv/#examples","text":"Rename a sequence to a new pattern: seqmv oldname.####.exr newname.####.exr -f 1001-1020 Preview what would be moved (dry run): seqmv -n oldname.####.png newname.####.pnf -f 10-20 Interactively copy files, prompting for each copy: seqmv -i askfile.####.exr confirmfile.####.exr -f 10-20 Move frames 10-20 and offset the destination frame numbering by +10 frames: seqmv file.####.exr offsetfile.####+10.exr -f 10-20","title":"Examples"},{"location":"seqrm/","text":"seqrm \u00b6 seqrm removes (deletes) a sequence of files for a specified frame range. This is useful for cleaning up intermediate or unwanted files in VFX/animation workflows. Usage \u00b6 seqrm PATTERN [FRAMES] PATTERN : Filename pattern (e.g., temp.####.exr ). FRAMES : Frame range or sequence expression (e.g., -f 1001-1020 ). Options \u00b6 --dry-run , -n : Show what would be deleted, but do not actually remove files. --interactive , -i : Request confirmation before deleting each file. --verbose , -v : Show detailed output for each file. --strict : Stop on the first error. --version : Show version and exit. Examples \u00b6 Remove a sequence of files: seqrm temp.####.exr -f 1001-1020 Preview what would be deleted (dry run): seqrm -n temp.####.exr -f 1-3 Interactively remove files, prompting for each copy: seqrm -i askfile.####.exr confirmfile.####.exr -f 10-20","title":"seqrm"},{"location":"seqrm/#seqrm","text":"seqrm removes (deletes) a sequence of files for a specified frame range. This is useful for cleaning up intermediate or unwanted files in VFX/animation workflows.","title":"seqrm"},{"location":"seqrm/#usage","text":"seqrm PATTERN [FRAMES] PATTERN : Filename pattern (e.g., temp.####.exr ). FRAMES : Frame range or sequence expression (e.g., -f 1001-1020 ).","title":"Usage"},{"location":"seqrm/#options","text":"--dry-run , -n : Show what would be deleted, but do not actually remove files. --interactive , -i : Request confirmation before deleting each file. --verbose , -v : Show detailed output for each file. --strict : Stop on the first error. --version : Show version and exit.","title":"Options"},{"location":"seqrm/#examples","text":"Remove a sequence of files: seqrm temp.####.exr -f 1001-1020 Preview what would be deleted (dry run): seqrm -n temp.####.exr -f 1-3 Interactively remove files, prompting for each copy: seqrm -i askfile.####.exr confirmfile.####.exr -f 10-20","title":"Examples"}]}